    This program takes a single integer argument between -128
    and 127 not including 0.  If the argument is positive, the
    program produces a solution to the Towers of Hanoi with that
    number of rings.  If the argument is negative, the program
    produces a solution to the Chinese Patience puzzle with a
    number of rings equal to the absolute value of the argument.
    Info files are included that describe these two puzzles in
    detail.

    Examples:
    ./prog 5
    Output: solution to Towers of Hanoi for five rings
    ./prog -6
    Output: solution to the Patience puzzle for six rings

    Most people who have written software for other people have
    been asked to count lines of code.	Naturally, this brings
    up the controversial question of exactly what defines a line
    of code.  This program serves to show that counting
    semicolons will not always provide a meaningful measure of
    code size.	This is especially true in this program where
    the number of semicolons itself is ambiguous.  Does it have
    two or three?  In addition, the only "C" keyword this
    program uses besides type names and qualifiers is "return",
    and the only function defined in the code is "main".
    The level of complexity of the program without multiple
    semicolons, statements, and functions is achieved by abusing
    C operators, especially the comma operator.  Considerable
    use of ||, &&, and ? : helps too.  In addition, main is
    called recursively.  The null pointer that terminates argv
    is used to pass additional information into main.  Even
    though the algorithms used by this code are simple, this
    program is still hard to follow even when indented properly.
    (It is pretty hard to indent this code reasonably, however.)

    Although this program is has only been tested on UNIX
    systems but will probably run on just about any machine with
    an ANSI C compiler.	 It does not use the C preprocessor at
    all.  The only functions it uses are atoi, malloc, memset,
    printf, and puts.  It does, however, require that the
    architecture it runs on have bytes that are at least eight
    bits long and pointers that are at least four bytes long.
    In addition, it requires an ANSI compiler since it uses
    "signed char" and ANSI-style function declarations.

    I have saved an RCS log containing an entry for each step of
    the obfuscation process including some steps that were
    eventually backed out.
